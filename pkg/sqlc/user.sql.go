// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCoin = `-- name: CreateCoin :one
INSERT INTO coins (
    portfolio_id, coin_name, coin_symbol, amount, no_of_coins
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING id, portfolio_id, coin_name, coin_symbol, amount, time_created, no_of_coins
`

type CreateCoinParams struct {
	PortfolioID int64  `json:"portfolio_id"`
	CoinName    string `json:"coin_name"`
	CoinSymbol  string `json:"coin_symbol"`
	Amount      int32  `json:"amount"`
	NoOfCoins   string `json:"no_of_coins"`
}

func (q *Queries) CreateCoin(ctx context.Context, arg CreateCoinParams) (Coin, error) {
	row := q.db.QueryRowContext(ctx, createCoin,
		arg.PortfolioID,
		arg.CoinName,
		arg.CoinSymbol,
		arg.Amount,
		arg.NoOfCoins,
	)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.CoinName,
		&i.CoinSymbol,
		&i.Amount,
		&i.TimeCreated,
		&i.NoOfCoins,
	)
	return i, err
}

const createFootball = `-- name: CreateFootball :one
INSERT INTO football (
    account_id, team, league, country
) VALUES (
             $1, $2, $3, $4
         )
RETURNING id, account_id, team, league, country
`

type CreateFootballParams struct {
	AccountID int64          `json:"account_id"`
	Team      sql.NullString `json:"team"`
	League    sql.NullString `json:"league"`
	Country   sql.NullString `json:"country"`
}

func (q *Queries) CreateFootball(ctx context.Context, arg CreateFootballParams) (Football, error) {
	row := q.db.QueryRowContext(ctx, createFootball,
		arg.AccountID,
		arg.Team,
		arg.League,
		arg.Country,
	)
	var i Football
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Team,
		&i.League,
		&i.Country,
	)
	return i, err
}

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO portfolios (
    name, account_id
) VALUES (
             $1, $2
         )
RETURNING id, name, account_id
`

type CreatePortfolioParams struct {
	Name      string `json:"name"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, createPortfolio, arg.Name, arg.AccountID)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    account_id, coin_id, coin_name, symbol, type, amount, time_transacted, price_purchased_at, no_of_coins
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
RETURNING id, account_id, coin_id, coin_name, symbol, type, amount, time_transacted, time_created, price_purchased_at, no_of_coins
`

type CreateTransactionParams struct {
	AccountID        int64     `json:"account_id"`
	CoinID           int64     `json:"coin_id"`
	CoinName         string    `json:"coin_name"`
	Symbol           string    `json:"symbol"`
	Type             int32     `json:"type"`
	Amount           int32     `json:"amount"`
	TimeTransacted   time.Time `json:"time_transacted"`
	PricePurchasedAt string    `json:"price_purchased_at"`
	NoOfCoins        string    `json:"no_of_coins"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.AccountID,
		arg.CoinID,
		arg.CoinName,
		arg.Symbol,
		arg.Type,
		arg.Amount,
		arg.TimeTransacted,
		arg.PricePurchasedAt,
		arg.NoOfCoins,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.CoinID,
		&i.CoinName,
		&i.Symbol,
		&i.Type,
		&i.Amount,
		&i.TimeTransacted,
		&i.TimeCreated,
		&i.PricePurchasedAt,
		&i.NoOfCoins,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, name, last_name, password
) VALUES (
             $1, $2, $3, $4
         )
RETURNING id, email, name, last_name, password, created_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	LastName string `json:"last_name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.LastName,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.LastName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const createWatchlist = `-- name: CreateWatchlist :one
INSERT INTO watchlists (
    name, account_id
) VALUES (
             $1, $2
         )
RETURNING id, name, account_id
`

type CreateWatchlistParams struct {
	Name      string `json:"name"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) CreateWatchlist(ctx context.Context, arg CreateWatchlistParams) (Watchlist, error) {
	row := q.db.QueryRowContext(ctx, createWatchlist, arg.Name, arg.AccountID)
	var i Watchlist
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}

const createWatchlistCoins = `-- name: CreateWatchlistCoins :one
INSERT INTO watchlist_coins (
    watchlist_id, name, symbol, rank
) VALUES (
             $1, $2, $3, $4
         )
RETURNING id, watchlist_id, name, symbol, rank
`

type CreateWatchlistCoinsParams struct {
	WatchlistID int64  `json:"watchlist_id"`
	Name        string `json:"name"`
	Symbol      string `json:"symbol"`
	Rank        int16  `json:"rank"`
}

func (q *Queries) CreateWatchlistCoins(ctx context.Context, arg CreateWatchlistCoinsParams) (WatchlistCoin, error) {
	row := q.db.QueryRowContext(ctx, createWatchlistCoins,
		arg.WatchlistID,
		arg.Name,
		arg.Symbol,
		arg.Rank,
	)
	var i WatchlistCoin
	err := row.Scan(
		&i.ID,
		&i.WatchlistID,
		&i.Name,
		&i.Symbol,
		&i.Rank,
	)
	return i, err
}

const deleteCoin = `-- name: DeleteCoin :exec
DELETE FROM coins
WHERE id = $1
`

func (q *Queries) DeleteCoin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCoin, id)
	return err
}

const deletePortfolio = `-- name: DeletePortfolio :exec
DELETE FROM portfolios
WHERE id = $1
`

func (q *Queries) DeletePortfolio(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePortfolio, id)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteWatchlist = `-- name: DeleteWatchlist :exec
DELETE FROM watchlists
WHERE id = $1
`

func (q *Queries) DeleteWatchlist(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWatchlist, id)
	return err
}

const deleteWatchlistCoin = `-- name: DeleteWatchlistCoin :exec
DELETE FROM watchlist_coins
WHERE id = $1
`

func (q *Queries) DeleteWatchlistCoin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWatchlistCoin, id)
	return err
}

const getCoin = `-- name: GetCoin :one
SELECT id, portfolio_id, coin_name, coin_symbol, amount, time_created, no_of_coins FROM coins
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCoin(ctx context.Context, id int64) (Coin, error) {
	row := q.db.QueryRowContext(ctx, getCoin, id)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.CoinName,
		&i.CoinSymbol,
		&i.Amount,
		&i.TimeCreated,
		&i.NoOfCoins,
	)
	return i, err
}

const getFootball = `-- name: GetFootball :one
SELECT id, account_id, team, league, country FROM football
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetFootball(ctx context.Context, accountID int64) (Football, error) {
	row := q.db.QueryRowContext(ctx, getFootball, accountID)
	var i Football
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Team,
		&i.League,
		&i.Country,
	)
	return i, err
}

const getPortfolio = `-- name: GetPortfolio :one
SELECT id, name, account_id FROM portfolios
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPortfolio(ctx context.Context, id int64) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, getPortfolio, id)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, account_id, coin_id, coin_name, symbol, type, amount, time_transacted, time_created, price_purchased_at, no_of_coins FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.CoinID,
		&i.CoinName,
		&i.Symbol,
		&i.Type,
		&i.Amount,
		&i.TimeTransacted,
		&i.TimeCreated,
		&i.PricePurchasedAt,
		&i.NoOfCoins,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, last_name, password, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.LastName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getWatchlist = `-- name: GetWatchlist :one
SELECT id, name, account_id FROM watchlists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWatchlist(ctx context.Context, id int64) (Watchlist, error) {
	row := q.db.QueryRowContext(ctx, getWatchlist, id)
	var i Watchlist
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}

const getWatchlistCoin = `-- name: GetWatchlistCoin :one
SELECT id, watchlist_id, name, symbol, rank FROM watchlist_coins
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWatchlistCoin(ctx context.Context, id int64) (WatchlistCoin, error) {
	row := q.db.QueryRowContext(ctx, getWatchlistCoin, id)
	var i WatchlistCoin
	err := row.Scan(
		&i.ID,
		&i.WatchlistID,
		&i.Name,
		&i.Symbol,
		&i.Rank,
	)
	return i, err
}

const listCoins = `-- name: ListCoins :many
SELECT id, portfolio_id, coin_name, coin_symbol, amount, time_created, no_of_coins FROM coins
WHERE portfolio_id = $1
`

func (q *Queries) ListCoins(ctx context.Context, portfolioID int64) ([]Coin, error) {
	rows, err := q.db.QueryContext(ctx, listCoins, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coin
	for rows.Next() {
		var i Coin
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.CoinName,
			&i.CoinSymbol,
			&i.Amount,
			&i.TimeCreated,
			&i.NoOfCoins,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPortforlios = `-- name: ListPortforlios :many
SELECT id, name, account_id FROM portfolios
WHERE account_id = $1
`

func (q *Queries) ListPortforlios(ctx context.Context, accountID int64) ([]Portfolio, error) {
	rows, err := q.db.QueryContext(ctx, listPortforlios, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Portfolio
	for rows.Next() {
		var i Portfolio
		if err := rows.Scan(&i.ID, &i.Name, &i.AccountID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByAccount = `-- name: ListTransactionsByAccount :many
SELECT id, account_id, coin_id, coin_name, symbol, type, amount, time_transacted, time_created, price_purchased_at, no_of_coins FROM transactions
WHERE account_id = $1
`

func (q *Queries) ListTransactionsByAccount(ctx context.Context, accountID int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.CoinID,
			&i.CoinName,
			&i.Symbol,
			&i.Type,
			&i.Amount,
			&i.TimeTransacted,
			&i.TimeCreated,
			&i.PricePurchasedAt,
			&i.NoOfCoins,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByAccountByCoin = `-- name: ListTransactionsByAccountByCoin :many
SELECT id, account_id, coin_id, coin_name, symbol, type, amount, time_transacted, time_created, price_purchased_at, no_of_coins FROM transactions
WHERE account_id = $1 AND coin_id = $2
`

type ListTransactionsByAccountByCoinParams struct {
	AccountID int64 `json:"account_id"`
	CoinID    int64 `json:"coin_id"`
}

func (q *Queries) ListTransactionsByAccountByCoin(ctx context.Context, arg ListTransactionsByAccountByCoinParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByAccountByCoin, arg.AccountID, arg.CoinID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.CoinID,
			&i.CoinName,
			&i.Symbol,
			&i.Type,
			&i.Amount,
			&i.TimeTransacted,
			&i.TimeCreated,
			&i.PricePurchasedAt,
			&i.NoOfCoins,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name, last_name, password, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.LastName,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWatchlists = `-- name: ListWatchlists :many
SELECT id, name, account_id FROM watchlists
WHERE account_id = $1
`

func (q *Queries) ListWatchlists(ctx context.Context, accountID int64) ([]Watchlist, error) {
	rows, err := q.db.QueryContext(ctx, listWatchlists, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Watchlist
	for rows.Next() {
		var i Watchlist
		if err := rows.Scan(&i.ID, &i.Name, &i.AccountID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWatchlistsCoins = `-- name: ListWatchlistsCoins :many
SELECT id, watchlist_id, name, symbol, rank FROM watchlist_coins
WHERE watchlist_id = $1
`

func (q *Queries) ListWatchlistsCoins(ctx context.Context, watchlistID int64) ([]WatchlistCoin, error) {
	rows, err := q.db.QueryContext(ctx, listWatchlistsCoins, watchlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WatchlistCoin
	for rows.Next() {
		var i WatchlistCoin
		if err := rows.Scan(
			&i.ID,
			&i.WatchlistID,
			&i.Name,
			&i.Symbol,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoin = `-- name: UpdateCoin :one
UPDATE coins
set amount = $2,
    no_of_coins = $3
WHERE id = $1
RETURNING id, portfolio_id, coin_name, coin_symbol, amount, time_created, no_of_coins
`

type UpdateCoinParams struct {
	ID        int64  `json:"id"`
	Amount    int32  `json:"amount"`
	NoOfCoins string `json:"no_of_coins"`
}

func (q *Queries) UpdateCoin(ctx context.Context, arg UpdateCoinParams) (Coin, error) {
	row := q.db.QueryRowContext(ctx, updateCoin, arg.ID, arg.Amount, arg.NoOfCoins)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.CoinName,
		&i.CoinSymbol,
		&i.Amount,
		&i.TimeCreated,
		&i.NoOfCoins,
	)
	return i, err
}

const updateFootball = `-- name: UpdateFootball :one
UPDATE football
set team = $2,
    league = $3,
    country = $4
WHERE account_id = $1
RETURNING id, account_id, team, league, country
`

type UpdateFootballParams struct {
	AccountID int64          `json:"account_id"`
	Team      sql.NullString `json:"team"`
	League    sql.NullString `json:"league"`
	Country   sql.NullString `json:"country"`
}

func (q *Queries) UpdateFootball(ctx context.Context, arg UpdateFootballParams) (Football, error) {
	row := q.db.QueryRowContext(ctx, updateFootball,
		arg.AccountID,
		arg.Team,
		arg.League,
		arg.Country,
	)
	var i Football
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Team,
		&i.League,
		&i.Country,
	)
	return i, err
}

const updatePortfolio = `-- name: UpdatePortfolio :one
UPDATE portfolios
set name = $2
WHERE id = $1
RETURNING id, name, account_id
`

type UpdatePortfolioParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePortfolio(ctx context.Context, arg UpdatePortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, updatePortfolio, arg.ID, arg.Name)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set name = $2,
    last_name = $3,
    password = $4
WHERE id = $1
RETURNING id, email, name, last_name, password, created_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	LastName string `json:"last_name"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.LastName,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.LastName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateWatchlist = `-- name: UpdateWatchlist :one
UPDATE watchlists
set name = $2
WHERE id = $1
RETURNING id, name, account_id
`

type UpdateWatchlistParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateWatchlist(ctx context.Context, arg UpdateWatchlistParams) (Watchlist, error) {
	row := q.db.QueryRowContext(ctx, updateWatchlist, arg.ID, arg.Name)
	var i Watchlist
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}
