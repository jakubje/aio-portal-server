// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: watchlist_coin.sql

package db

import (
	"context"
)

const addWatchlistCoin = `-- name: AddWatchlistCoin :one
INSERT INTO watchlist_coins (
    watchlist_id, coin_id
) VALUES (
             $1, $2
         )
RETURNING watchlist_id, coin_id
`

type AddWatchlistCoinParams struct {
	WatchlistID int64  `json:"watchlist_id"`
	CoinID      string `json:"coin_id"`
}

func (q *Queries) AddWatchlistCoin(ctx context.Context, arg AddWatchlistCoinParams) (WatchlistCoin, error) {
	row := q.db.QueryRow(ctx, addWatchlistCoin, arg.WatchlistID, arg.CoinID)
	var i WatchlistCoin
	err := row.Scan(&i.WatchlistID, &i.CoinID)
	return i, err
}

const listWatchlistCoins = `-- name: ListWatchlistCoins :many
SELECT c.coin_id, c.coin_uuid, c.name, c.price, c.market_cap, c.number_of_markets, c.number_of_exchanges, c.approved_supply, c.circulating_supply, c.total_supply, c.max_supply, c.rank, c.volume, c.daily_change, c.image_url, c.description, c.all_time_high, c.tags, c.website, c.social_media_links, c.created_at, c.updated_at
FROM coins c
INNER JOIN watchlist_coins wc ON c.coin_id = wc.coin_id
INNER JOIN watchlists watchlist ON wc.watchlist_id = watchlist.id
WHERE wc.watchlist_id = $1 AND watchlist.account_id = $2
`

type ListWatchlistCoinsParams struct {
	WatchlistID int64 `json:"watchlist_id"`
	AccountID   int64 `json:"account_id"`
}

func (q *Queries) ListWatchlistCoins(ctx context.Context, arg ListWatchlistCoinsParams) ([]Coin, error) {
	rows, err := q.db.Query(ctx, listWatchlistCoins, arg.WatchlistID, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coin{}
	for rows.Next() {
		var i Coin
		if err := rows.Scan(
			&i.CoinID,
			&i.CoinUuid,
			&i.Name,
			&i.Price,
			&i.MarketCap,
			&i.NumberOfMarkets,
			&i.NumberOfExchanges,
			&i.ApprovedSupply,
			&i.CirculatingSupply,
			&i.TotalSupply,
			&i.MaxSupply,
			&i.Rank,
			&i.Volume,
			&i.DailyChange,
			&i.ImageUrl,
			&i.Description,
			&i.AllTimeHigh,
			&i.Tags,
			&i.Website,
			&i.SocialMediaLinks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWatchlistCoin = `-- name: RemoveWatchlistCoin :exec
DELETE FROM watchlist_coins
WHERE watchlist_id = $1 and coin_id = $2
`

type RemoveWatchlistCoinParams struct {
	WatchlistID int64  `json:"watchlist_id"`
	CoinID      string `json:"coin_id"`
}

func (q *Queries) RemoveWatchlistCoin(ctx context.Context, arg RemoveWatchlistCoinParams) error {
	_, err := q.db.Exec(ctx, removeWatchlistCoin, arg.WatchlistID, arg.CoinID)
	return err
}
