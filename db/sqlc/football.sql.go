// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: football.sql

package db

import (
	"context"
)

const createFootball = `-- name: CreateFootball :one
INSERT INTO football (
    account_id, team, league, country
) VALUES (
             $1, $2, $3, $4
         )
RETURNING id, account_id, team, league, country
`

type CreateFootballParams struct {
	AccountID int64  `json:"account_id"`
	Team      string `json:"team"`
	League    string `json:"league"`
	Country   string `json:"country"`
}

func (q *Queries) CreateFootball(ctx context.Context, arg CreateFootballParams) (Football, error) {
	row := q.db.QueryRowContext(ctx, createFootball,
		arg.AccountID,
		arg.Team,
		arg.League,
		arg.Country,
	)
	var i Football
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Team,
		&i.League,
		&i.Country,
	)
	return i, err
}

const getFootball = `-- name: GetFootball :one
SELECT id, account_id, team, league, country FROM football
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetFootball(ctx context.Context, accountID int64) (Football, error) {
	row := q.db.QueryRowContext(ctx, getFootball, accountID)
	var i Football
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Team,
		&i.League,
		&i.Country,
	)
	return i, err
}

const updateFootball = `-- name: UpdateFootball :one
UPDATE football
set team = $2,
    league = $3,
    country = $4
WHERE account_id = $1
RETURNING id, account_id, team, league, country
`

type UpdateFootballParams struct {
	AccountID int64  `json:"account_id"`
	Team      string `json:"team"`
	League    string `json:"league"`
	Country   string `json:"country"`
}

func (q *Queries) UpdateFootball(ctx context.Context, arg UpdateFootballParams) (Football, error) {
	row := q.db.QueryRowContext(ctx, updateFootball,
		arg.AccountID,
		arg.Team,
		arg.League,
		arg.Country,
	)
	var i Football
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Team,
		&i.League,
		&i.Country,
	)
	return i, err
}
