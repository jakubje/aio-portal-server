// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: portfolio.sql

package db

import (
	"context"
)

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO portfolios (
    name, account_id
) VALUES (
             $1, $2
         )
RETURNING id, account_id, name, holdings, change_24h, profit_loss
`

type CreatePortfolioParams struct {
	Name      string `json:"name"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, createPortfolio, arg.Name, arg.AccountID)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Holdings,
		&i.Change24h,
		&i.ProfitLoss,
	)
	return i, err
}

const deletePortfolio = `-- name: DeletePortfolio :exec
DELETE FROM portfolios
WHERE id = $1
`

func (q *Queries) DeletePortfolio(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePortfolio, id)
	return err
}

const getPortfolio = `-- name: GetPortfolio :one
SELECT id, account_id, name, holdings, change_24h, profit_loss FROM portfolios
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPortfolio(ctx context.Context, id int64) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, getPortfolio, id)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Holdings,
		&i.Change24h,
		&i.ProfitLoss,
	)
	return i, err
}

const listPortforlios = `-- name: ListPortforlios :many
SELECT id, account_id, name, holdings, change_24h, profit_loss FROM portfolios
WHERE account_id = $1
`

func (q *Queries) ListPortforlios(ctx context.Context, accountID int64) ([]Portfolio, error) {
	rows, err := q.db.QueryContext(ctx, listPortforlios, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Portfolio{}
	for rows.Next() {
		var i Portfolio
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Holdings,
			&i.Change24h,
			&i.ProfitLoss,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePortfolio = `-- name: UpdatePortfolio :one
UPDATE portfolios
set name = $2
WHERE id = $1
RETURNING id, account_id, name, holdings, change_24h, profit_loss
`

type UpdatePortfolioParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePortfolio(ctx context.Context, arg UpdatePortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, updatePortfolio, arg.ID, arg.Name)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Holdings,
		&i.Change24h,
		&i.ProfitLoss,
	)
	return i, err
}
