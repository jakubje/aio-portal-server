// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: coin.sql

package db

import (
	"context"
	"time"
)

const addCoin = `-- name: AddCoin :one
INSERT INTO coin (
    coin_name, coin_symbol, quantity, time_created
) VALUES (
             $1, $2, $3, $4
         )
RETURNING id, coin_name, coin_symbol, quantity, time_created
`

type AddCoinParams struct {
	CoinName    string    `json:"coin_name"`
	CoinSymbol  string    `json:"coin_symbol"`
	Quantity    int32     `json:"quantity"`
	TimeCreated time.Time `json:"time_created"`
}

func (q *Queries) AddCoin(ctx context.Context, arg AddCoinParams) (Coin, error) {
	row := q.db.QueryRowContext(ctx, addCoin,
		arg.CoinName,
		arg.CoinSymbol,
		arg.Quantity,
		arg.TimeCreated,
	)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.CoinName,
		&i.CoinSymbol,
		&i.Quantity,
		&i.TimeCreated,
	)
	return i, err
}

const deleteCoin = `-- name: DeleteCoin :exec
DELETE FROM coin
WHERE id = $1
`

func (q *Queries) DeleteCoin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCoin, id)
	return err
}

const getCoin = `-- name: GetCoin :one
SELECT id, coin_name, coin_symbol, quantity, time_created FROM coin
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCoin(ctx context.Context, id int64) (Coin, error) {
	row := q.db.QueryRowContext(ctx, getCoin, id)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.CoinName,
		&i.CoinSymbol,
		&i.Quantity,
		&i.TimeCreated,
	)
	return i, err
}

const listCoins = `-- name: ListCoins :many
SELECT id, coin_name, coin_symbol, quantity, time_created FROM coin
`

func (q *Queries) ListCoins(ctx context.Context) ([]Coin, error) {
	rows, err := q.db.QueryContext(ctx, listCoins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coin{}
	for rows.Next() {
		var i Coin
		if err := rows.Scan(
			&i.ID,
			&i.CoinName,
			&i.CoinSymbol,
			&i.Quantity,
			&i.TimeCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoin = `-- name: UpdateCoin :one
UPDATE coin
set quantity = $2
WHERE id = $1
RETURNING id, coin_name, coin_symbol, quantity, time_created
`

type UpdateCoinParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateCoin(ctx context.Context, arg UpdateCoinParams) (Coin, error) {
	row := q.db.QueryRowContext(ctx, updateCoin, arg.ID, arg.Quantity)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.CoinName,
		&i.CoinSymbol,
		&i.Quantity,
		&i.TimeCreated,
	)
	return i, err
}
