// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jakub/aioportal/server/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/jakub/aioportal/server/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateFootball mocks base method.
func (m *MockStore) CreateFootball(arg0 context.Context, arg1 db.CreateFootballParams) (db.Football, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFootball", arg0, arg1)
	ret0, _ := ret[0].(db.Football)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFootball indicates an expected call of CreateFootball.
func (mr *MockStoreMockRecorder) CreateFootball(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFootball", reflect.TypeOf((*MockStore)(nil).CreateFootball), arg0, arg1)
}

// CreatePortfolio mocks base method.
func (m *MockStore) CreatePortfolio(arg0 context.Context, arg1 db.CreatePortfolioParams) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolio", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolio indicates an expected call of CreatePortfolio.
func (mr *MockStoreMockRecorder) CreatePortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolio", reflect.TypeOf((*MockStore)(nil).CreatePortfolio), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateWatchlist mocks base method.
func (m *MockStore) CreateWatchlist(arg0 context.Context, arg1 db.CreateWatchlistParams) (db.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWatchlist", arg0, arg1)
	ret0, _ := ret[0].(db.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWatchlist indicates an expected call of CreateWatchlist.
func (mr *MockStoreMockRecorder) CreateWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWatchlist", reflect.TypeOf((*MockStore)(nil).CreateWatchlist), arg0, arg1)
}

// CreateWatchlistCoins mocks base method.
func (m *MockStore) CreateWatchlistCoins(arg0 context.Context, arg1 db.CreateWatchlistCoinsParams) (db.WatchlistCoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWatchlistCoins", arg0, arg1)
	ret0, _ := ret[0].(db.WatchlistCoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWatchlistCoins indicates an expected call of CreateWatchlistCoins.
func (mr *MockStoreMockRecorder) CreateWatchlistCoins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWatchlistCoins", reflect.TypeOf((*MockStore)(nil).CreateWatchlistCoins), arg0, arg1)
}

// DeletePortfolio mocks base method.
func (m *MockStore) DeletePortfolio(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortfolio", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortfolio indicates an expected call of DeletePortfolio.
func (mr *MockStoreMockRecorder) DeletePortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolio", reflect.TypeOf((*MockStore)(nil).DeletePortfolio), arg0, arg1)
}

// DeleteTransaction mocks base method.
func (m *MockStore) DeleteTransaction(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStoreMockRecorder) DeleteTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteWatchlist mocks base method.
func (m *MockStore) DeleteWatchlist(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWatchlist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWatchlist indicates an expected call of DeleteWatchlist.
func (mr *MockStoreMockRecorder) DeleteWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWatchlist", reflect.TypeOf((*MockStore)(nil).DeleteWatchlist), arg0, arg1)
}

// DeleteWatchlistCoin mocks base method.
func (m *MockStore) DeleteWatchlistCoin(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWatchlistCoin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWatchlistCoin indicates an expected call of DeleteWatchlistCoin.
func (mr *MockStoreMockRecorder) DeleteWatchlistCoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWatchlistCoin", reflect.TypeOf((*MockStore)(nil).DeleteWatchlistCoin), arg0, arg1)
}

// GetFootball mocks base method.
func (m *MockStore) GetFootball(arg0 context.Context, arg1 int64) (db.Football, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFootball", arg0, arg1)
	ret0, _ := ret[0].(db.Football)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFootball indicates an expected call of GetFootball.
func (mr *MockStoreMockRecorder) GetFootball(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFootball", reflect.TypeOf((*MockStore)(nil).GetFootball), arg0, arg1)
}

// GetPortfolio mocks base method.
func (m *MockStore) GetPortfolio(arg0 context.Context, arg1 int64) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolio", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolio indicates an expected call of GetPortfolio.
func (mr *MockStoreMockRecorder) GetPortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolio", reflect.TypeOf((*MockStore)(nil).GetPortfolio), arg0, arg1)
}

// GetRollUpByCoinByPortfolio mocks base method.
func (m *MockStore) GetRollUpByCoinByPortfolio(arg0 context.Context, arg1 int64) ([]db.GetRollUpByCoinByPortfolioRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollUpByCoinByPortfolio", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRollUpByCoinByPortfolioRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollUpByCoinByPortfolio indicates an expected call of GetRollUpByCoinByPortfolio.
func (mr *MockStoreMockRecorder) GetRollUpByCoinByPortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollUpByCoinByPortfolio", reflect.TypeOf((*MockStore)(nil).GetRollUpByCoinByPortfolio), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockStore) GetTransaction(arg0 context.Context, arg1 uuid.UUID) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockStoreMockRecorder) GetTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetWatchlist mocks base method.
func (m *MockStore) GetWatchlist(arg0 context.Context, arg1 int64) (db.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchlist", arg0, arg1)
	ret0, _ := ret[0].(db.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchlist indicates an expected call of GetWatchlist.
func (mr *MockStoreMockRecorder) GetWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchlist", reflect.TypeOf((*MockStore)(nil).GetWatchlist), arg0, arg1)
}

// GetWatchlistCoin mocks base method.
func (m *MockStore) GetWatchlistCoin(arg0 context.Context, arg1 int64) (db.WatchlistCoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchlistCoin", arg0, arg1)
	ret0, _ := ret[0].(db.WatchlistCoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchlistCoin indicates an expected call of GetWatchlistCoin.
func (mr *MockStoreMockRecorder) GetWatchlistCoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchlistCoin", reflect.TypeOf((*MockStore)(nil).GetWatchlistCoin), arg0, arg1)
}

// ListPortforlios mocks base method.
func (m *MockStore) ListPortforlios(arg0 context.Context, arg1 int64) ([]db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortforlios", arg0, arg1)
	ret0, _ := ret[0].([]db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortforlios indicates an expected call of ListPortforlios.
func (mr *MockStoreMockRecorder) ListPortforlios(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortforlios", reflect.TypeOf((*MockStore)(nil).ListPortforlios), arg0, arg1)
}

// ListTransactionsByAccount mocks base method.
func (m *MockStore) ListTransactionsByAccount(arg0 context.Context, arg1 db.ListTransactionsByAccountParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsByAccount", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsByAccount indicates an expected call of ListTransactionsByAccount.
func (mr *MockStoreMockRecorder) ListTransactionsByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsByAccount", reflect.TypeOf((*MockStore)(nil).ListTransactionsByAccount), arg0, arg1)
}

// ListTransactionsByAccountByCoin mocks base method.
func (m *MockStore) ListTransactionsByAccountByCoin(arg0 context.Context, arg1 db.ListTransactionsByAccountByCoinParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsByAccountByCoin", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsByAccountByCoin indicates an expected call of ListTransactionsByAccountByCoin.
func (mr *MockStoreMockRecorder) ListTransactionsByAccountByCoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsByAccountByCoin", reflect.TypeOf((*MockStore)(nil).ListTransactionsByAccountByCoin), arg0, arg1)
}

// ListTransactionsByPortfolio mocks base method.
func (m *MockStore) ListTransactionsByPortfolio(arg0 context.Context, arg1 db.ListTransactionsByPortfolioParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsByPortfolio", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsByPortfolio indicates an expected call of ListTransactionsByPortfolio.
func (mr *MockStoreMockRecorder) ListTransactionsByPortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsByPortfolio", reflect.TypeOf((*MockStore)(nil).ListTransactionsByPortfolio), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// ListWatchlists mocks base method.
func (m *MockStore) ListWatchlists(arg0 context.Context, arg1 int64) ([]db.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatchlists", arg0, arg1)
	ret0, _ := ret[0].([]db.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWatchlists indicates an expected call of ListWatchlists.
func (mr *MockStoreMockRecorder) ListWatchlists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatchlists", reflect.TypeOf((*MockStore)(nil).ListWatchlists), arg0, arg1)
}

// ListWatchlistsCoins mocks base method.
func (m *MockStore) ListWatchlistsCoins(arg0 context.Context, arg1 int64) ([]db.WatchlistCoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatchlistsCoins", arg0, arg1)
	ret0, _ := ret[0].([]db.WatchlistCoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWatchlistsCoins indicates an expected call of ListWatchlistsCoins.
func (mr *MockStoreMockRecorder) ListWatchlistsCoins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatchlistsCoins", reflect.TypeOf((*MockStore)(nil).ListWatchlistsCoins), arg0, arg1)
}

// UpdateFootball mocks base method.
func (m *MockStore) UpdateFootball(arg0 context.Context, arg1 db.UpdateFootballParams) (db.Football, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFootball", arg0, arg1)
	ret0, _ := ret[0].(db.Football)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFootball indicates an expected call of UpdateFootball.
func (mr *MockStoreMockRecorder) UpdateFootball(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFootball", reflect.TypeOf((*MockStore)(nil).UpdateFootball), arg0, arg1)
}

// UpdatePortfolio mocks base method.
func (m *MockStore) UpdatePortfolio(arg0 context.Context, arg1 db.UpdatePortfolioParams) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolio", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolio indicates an expected call of UpdatePortfolio.
func (mr *MockStoreMockRecorder) UpdatePortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolio", reflect.TypeOf((*MockStore)(nil).UpdatePortfolio), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateWatchlist mocks base method.
func (m *MockStore) UpdateWatchlist(arg0 context.Context, arg1 db.UpdateWatchlistParams) (db.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWatchlist", arg0, arg1)
	ret0, _ := ret[0].(db.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWatchlist indicates an expected call of UpdateWatchlist.
func (mr *MockStoreMockRecorder) UpdateWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWatchlist", reflect.TypeOf((*MockStore)(nil).UpdateWatchlist), arg0, arg1)
}
