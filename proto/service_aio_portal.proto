syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_user.proto";
import "rpc_login_user.proto";
import "rpc_update_user.proto";
import "rpc_verify_email.proto";
import "rpc_create_portfolio.proto";
import "rpc_update_portfolio.proto";
import "rpc_get_portfolio.proto";
import "rpc_list_portfolios.proto";
import "rpc_portfolio_roll_up.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/jakub/aioportal/server/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "AIO Portal API";
    version: "1.1";
    contact: {
      name: "Jake";
      url: "https://github.com/jakubje";
      email: "jakethedev@gmail.com";
    };
  };
};

service AioPortal {
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/create_user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new user";
      summary: "Create new user";
      };
  }
  rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/v1/login_user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to login user and get an access token & refresh token";
      summary: "Login user";
    };
  }
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/v1/update_user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update user";
      summary: "Update user";
    };
  }
  rpc VerifyEmail (VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      get: "/v1/verify_email"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to verify user email";
      summary: "Verify email";
    };
  }
  rpc CreatePortfolio (CreatePortfolioRequest) returns (CreatePortfolioResponse) {
    option (google.api.http) = {
      post: "/v1/create_portfolio"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new portfolio";
      summary: "Create new portfolio";
    };
  }
  rpc UpdatePortfolio (UpdatePortfolioRequest) returns (UpdatePortfolioResponse) {
    option (google.api.http) = {
      post: "/v1/update_portfolio"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update a portfolio";
      summary: "Update a portfolio";
    };
  }
  rpc GetPortfolio (GetPortfolioRequest) returns (GetPortfolioResponse) {
    option (google.api.http) = {
      get: "/v1/get_portfolio"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to get a portfolio";
      summary: "Get a portfolio";
    };
  }
  rpc ListPortfolios (ListPortfoliosRequest) returns (ListPortfoliosResponse) {
    option (google.api.http) = {
      get: "/v1/get_portfolios"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to get a list of user portfolios";
      summary: "Get a list of user portfolios";
    };
  }
  rpc GetRollUp (RollUpRequest) returns (RollUpResponse) {
    option (google.api.http) = {
      get: "/v1/get_rollup"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to get a summary of account holdings";
      summary: "Get a list of user currency holdings";
    };
  }
}